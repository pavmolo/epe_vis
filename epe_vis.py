import streamlit as st
import pandas as pd
import uuid
from fpdf import FPDF
import base64
import plotly.express as px
import plotly.figure_factory as ff
import datetime
from datetime import timedelta

input_row = st.columns(2)
with input_row[0]:
    work_minutes = st.number_input("–†–∞–±–æ—á–∏—Ö –º–∏–Ω—É—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Å—É—Ç–∫–∏", 0)
with input_row[1]:
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª", accept_multiple_files=False)
if "rows" not in st.session_state:
    st.session_state["rows"] = []

rows_collection = []

def add_row():
    element_id = uuid.uuid4()
    st.session_state["rows"].append(str(element_id))


def remove_row(row_id):
    st.session_state["rows"].remove(str(row_id))


def generate_row(row_id):
    row_container = st.empty()
    row_columns = row_container.columns((5, 3, 3, 3, 1))
    row_name = row_columns[0].text_input("SKU –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏", key=f"txt_{row_id}")
    row_qty = row_columns[1].number_input("–î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å", step=1, key=f"nbr_{row_id}")
    row_cycle = row_columns[2].number_input("–í—Ä–µ–º—è —Ü–∏–∫–ª–∞", step=2, key=f"time_{row_id}")
    row_co = row_columns[3].number_input("–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏", step=3, key=f"co_{row_id}")
    row_columns[4].button("üóëÔ∏è", key=f"del_{row_id}", on_click=remove_row, args=[row_id])
    return {"name": row_name, "qty": row_qty, "cycle": row_cycle, "co": row_co}

if uploaded_file:
    menu = st.columns(2)
    with menu[0]:
        st.button("–î–æ–±–∞–≤–∏—Ç—å SKU", on_click=add_row)
    
if len(rows_collection) == 0:
    if uploaded_file:
        data = pd.read_excel(uploaded_file)
        st.subheader("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        co_in_a_day = work_minutes - (data['–î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å'] * data['–í—Ä–µ–º—è —Ü–∏–∫–ª–∞']).sum()
        co_time_in_epe = data['–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏'].sum()
        epe = co_time_in_epe / co_in_a_day
        t_data = ((data['–î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å'] * epe).astype('int')) * data['–í—Ä–µ–º—è —Ü–∏–∫–ª–∞']
        timeline_data = pd.concat([data['SKU'], t_data, data['–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏']],axis=1)
        timeline_data.columns = ['SKU', '–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏']
        stage = []
        time = []
        for sku in data['SKU']:
            stage.append(f'–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ {sku}')
            stage.append(f'–ü–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∞')
            time.append(timeline_data[timeline_data['SKU'] == sku]['–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'].iloc[0])
            time.append(timeline_data[timeline_data['SKU'] == sku]['–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏'].iloc[0])
        finish_time = []
        start_time = []
        a = 0
        for i in time:
            start_time.append(a)
            a = a + i
            finish_time.append(a)
        #today = pd.Timestamp('today').strftime('%Y-%m-%d')
        #now = datetime.datetime.now()
        #time_data = pd.concat([pd.Series(stage), pd.Series(time), (now + pd.Series([pd.Timedelta(minutes=i) for i in start_time])), (now + pd.Series([pd.Timedelta(minutes=i) for i in finish_time]))],axis=1)
        #time_data['Start'] = pd.to_datetime(time_data['Start'])
        #time_data['Finish'] = pd.to_datetime(time_data['Finish'])
        time_data = pd.concat([pd.Series(stage), pd.Series(time), pd.Series(start_time), pd.Series(finish_time)],axis=1)
        time_data.columns = ['Task', 'Description', 'Start', 'Finish']
        #st.dataframe(data=time_data, use_container_width=True)
        #fig = px.timeline(time_data, x_start="Start", x_end="Finish", y="Task", Description = '–í—Ä–µ–º—è, –º–∏–Ω.')
        fig = ff.create_gantt(time_data, bar_width = 0.4, index_col='Task')
        fig.update_layout(xaxis_type='linear', autosize=False)
        fig.layout.update({'title': '–°—Ö–µ–º–∞ —Ü–∏–∫–ª–∞ EPE'})
        #fig.update_layout(hovermode="Description")
        fig.update_layout(xaxis_title="–õ–∏–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö", yaxis_title="–û–ø–µ—Ä–∞—Ü–∏—è")
        fig.show()

        fig.update_yaxes(autorange="reversed")
        col1, col2 = st.columns(2)
        col1.metric("–í—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –≤ –¥–µ–Ω—å", f"{co_in_a_day} –º–∏–Ω—É—Ç")
        col2.metric("–í—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –≤ —Ü–∏–∫–ª–µ EPE", f"{co_time_in_epe} –º–∏–Ω—É—Ç")
        col3, col4 = st.columns(2)
        col3.metric("EPE –≤ –¥–Ω—è—Ö", f"{epe} –¥–Ω–µ–π")
        col4.metric("EPE –≤ –º–∏–Ω—É—Ç–∞—Ö", f"{epe * work_minutes} –º–∏–Ω—É—Ç")
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ EPE")
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

if len(rows_collection) > 0:
    st.title("–î–∞–Ω–Ω—ã–µ –ø–æ SKU –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏")

    for row in st.session_state["rows"]:
        row_data = generate_row(row)
        rows_collection.append(row_data)

    
    st.subheader("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    data = pd.DataFrame(rows_collection)
    data.rename(columns={"name": "SKU", "qty": "–î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å", "cycle": "–í—Ä–µ–º—è —Ü–∏–∫–ª–∞", "co": "–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏"}, inplace=True)
    co_in_a_day = work_minutes - (data['–î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å'] * data['–í—Ä–µ–º—è —Ü–∏–∫–ª–∞']).sum()
    co_time_in_epe = data['–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏'].sum()
    epe = co_time_in_epe / co_in_a_day
    if epe > 0:
    
        t_data = ((data['–î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å'] * epe).astype('int')) * data['–í—Ä–µ–º—è —Ü–∏–∫–ª–∞']
        timeline_data = pd.concat([data['SKU'], t_data, data['–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏']],axis=1)
        timeline_data.columns = ['SKU', '–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏']
    
        stage = []
        time = []
        for sku in data['SKU']:
            stage.append(f'–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ {sku}')
            stage.append(f'–ü–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∞')
            time.append(timeline_data[timeline_data['SKU'] == sku]['–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'].iloc[0])
            time.append(timeline_data[timeline_data['SKU'] == sku]['–í—Ä–µ–º—è –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏'].iloc[0])
        finish_time = []
        start_time = []
        a = 0
        for i in time:
            start_time.append(a)
            a = a + i
            finish_time.append(a)
        #today = pd.Timestamp('today').strftime('%Y-%m-%d')
        #now = datetime.datetime.now()
        #time_data = pd.concat([pd.Series(stage), pd.Series(time), (now + pd.Series([pd.Timedelta(minutes=i) for i in start_time])), (now + pd.Series([pd.Timedelta(minutes=i) for i in finish_time]))],axis=1)
        #time_data['Start'] = pd.to_datetime(time_data['Start'])
        #time_data['Finish'] = pd.to_datetime(time_data['Finish'])
        time_data = pd.concat([pd.Series(stage), pd.Series(time), pd.Series(start_time), pd.Series(finish_time)],axis=1)
        time_data.columns = ['Task', 'Description', 'Start', 'Finish']
        #st.dataframe(data=time_data, use_container_width=True)
        #fig = px.timeline(time_data, x_start="Start", x_end="Finish", y="Task", Description = '–í—Ä–µ–º—è, –º–∏–Ω.')
        fig = ff.create_gantt(time_data, bar_width = 0.4, index_col='Task')
        fig.update_layout(xaxis_type='linear', autosize=False)
        fig.layout.update({'title': '–°—Ö–µ–º–∞ —Ü–∏–∫–ª–∞ EPE'})
        #fig.update_layout(hovermode="Description")
        fig.update_layout(xaxis_title="–õ–∏–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö", yaxis_title="–û–ø–µ—Ä–∞—Ü–∏—è")
        fig.show()

        fig.update_yaxes(autorange="reversed")
        col1, col2 = st.columns(2)
        col1.metric("–í—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –≤ –¥–µ–Ω—å", f"{co_in_a_day} –º–∏–Ω—É—Ç")
        col2.metric("–í—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –≤ —Ü–∏–∫–ª–µ EPE", f"{co_time_in_epe} –º–∏–Ω—É—Ç")
        col3, col4 = st.columns(2)
        col3.metric("EPE –≤ –¥–Ω—è—Ö", f"{epe} –¥–Ω–µ–π")
        col4.metric("EPE –≤ –º–∏–Ω—É—Ç–∞—Ö", f"{epe * work_minutes} –º–∏–Ω—É—Ç")
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ EPE")
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

        #st.title(f"–í—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –≤ –¥–µ–Ω—å: {co_in_a_day} –º–∏–Ω—É—Ç")
        #st.title(f"–í—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –≤ —Ü–∏–∫–ª–µ EPE: {co_time_in_epe} –º–∏–Ω—É—Ç")
        #st.title(f"EPE = {epe} –¥–Ω–µ–π")
        #st.title(f"EPE = {epe * work_minutes} –º–∏–Ω—É—Ç")
        
        
        
    else:
        st.title(f"–í —Ü–∏–∫–ª–µ –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫—É. EPE –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {epe} –¥–Ω–µ–π")
